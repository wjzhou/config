{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"class in file": {
		"prefix": "clc",
		"body": [
			"/*",
			" Copyright (c) 2018, Boxed Wholesale. All rights reserved.",
			"*/",
			"",
			"#include \"${TM_FILENAME_BASE}.h\"",
			"",
			"namespace ${TM_FILEPATH/.*\\/([^\\/]*)\\/src\\/.*/${1}/} {",
			"",
			"${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/upcase}/g}::${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/upcase}/g}() {",
			"  $1",
			"}",
			"",
			"}  // namespace ${TM_FILEPATH/.*\\/([^\\/]*)\\/src\\/.*/${1}/}",
			""
		]
	},
	"header in file": {
		"prefix": "clh",
		"body": [
			"/*",
			" Copyright (c) 2018, Boxed Wholesale. All rights reserved.",
			"*/",
			"",
			"#ifndef ${TM_FILENAME_BASE/.*/${0:/upcase}/g}_H_",
			"#define ${TM_FILENAME_BASE/.*/${0:/upcase}/g}_H_",
			"",
			"namespace ${TM_FILEPATH/.*\\/([^\\/]*)\\/src\\/.*/${1}/} {",
			"",
			"class ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/upcase}/g} {",
			" public:",
			"  ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/upcase}/g}();",
			"  ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/upcase}/g}(const ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/upcase}/g}&) = delete;",
			"  ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/upcase}/g}& operator=(const ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/upcase}/g}&) = delete;",
			"$1",
			" private:",
			"};",
			"",
			"}  // namespace ${TM_FILEPATH/.*\\/([^\\/]*)\\/src\\/.*/${1}/}",
			"#endif  // ${TM_FILENAME_BASE/.*/${0:/upcase}/g}_H_",
			"",
		]
	}
}